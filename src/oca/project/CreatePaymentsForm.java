/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oca.project;

import java.util.ArrayList;
import java.util.Calendar;

/*Class that creates payments for salaried employees either for Monthly or
Fortnightly time period  */
public class CreatePaymentsForm extends javax.swing.JFrame {

    private ArrayList<Person> personList;
    private MainForm mainForm;
    private ArrayList<PayrollReportItem> payrollRecordList;
    
    
    /**
     * Creates new form CreatePaymentsForm
     */
    public CreatePaymentsForm(ArrayList <PayrollReportItem> payrollRecordList) {
        initComponents();
        this.payrollRecordList = payrollRecordList;
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgMessage = new javax.swing.JOptionPane();
        btnCreateMonthlySalariedPayments = new javax.swing.JButton();
        btnCreateFortnightlyPayments = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCreateMonthlySalariedPayments.setBackground(new java.awt.Color(204, 204, 255));
        btnCreateMonthlySalariedPayments.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCreateMonthlySalariedPayments.setText("Create Monthly Payment ");
        btnCreateMonthlySalariedPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMonthlySalariedPaymentsActionPerformed(evt);
            }
        });

        btnCreateFortnightlyPayments.setBackground(new java.awt.Color(204, 204, 255));
        btnCreateFortnightlyPayments.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCreateFortnightlyPayments.setText("Create Fortnightly Payments");
        btnCreateFortnightlyPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFortnightlyPaymentsActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Add Payments");

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCreateFortnightlyPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateMonthlySalariedPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 177, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel8)
                .addGap(61, 61, 61)
                .addComponent(btnCreateMonthlySalariedPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnCreateFortnightlyPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    //event method that create payments to monthly paid employees
    private void btnCreateMonthlySalariedPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMonthlySalariedPaymentsActionPerformed
          for(Person p : getPersonList()) { //looping through each object in the person List
              
          if(p instanceof SalariedSubordinate) {    //checking if Person object is an instance of SalariedSubordinate
              SalariedSubordinate salariedSubordinate = (SalariedSubordinate) p;
              
              if(salariedSubordinate.getTimePeriod().equals(TimePeriod.MONTHLY)) {  //checking if Time Period is monthly
                  double pay = salariedSubordinate.calculatePay();
                  
                  //creating Payroll Report Item object and adding it to the ArrayList
                  PayrollReportItem payrollReportItem = new PayrollReportItem(salariedSubordinate, pay,
                  mainForm.getCurrentMonthlyPaymentDate(), TimePeriod.MONTHLY);
                  payrollRecordList.add(payrollReportItem);
              }
          }
          else if (p instanceof CEO) {  //checking if Person object is an instance of CEO class
              CEO ceo = (CEO) p;
              
              if(ceo.getTimePeriod().equals(TimePeriod.MONTHLY)) {  //checking if Time Period is monthly
                  double pay = ceo.calculatePay();
                  
                    //creating Payroll Report Item object and adding it to the ArrayList
                  PayrollReportItem payrollReportItem = new PayrollReportItem(ceo, pay,
                  mainForm.getCurrentMonthlyPaymentDate(), TimePeriod.MONTHLY);
                  
                  payrollRecordList.add(payrollReportItem);
              }
          }
      }
          
      msgMessage.showMessageDialog(this, "Monthly payments have been added for "
              + mainForm.getCurrentMonthlyPaymentDate(), "Announcement",
              javax.swing.JOptionPane.INFORMATION_MESSAGE);
      
      //incrementing payment date by 1 month
      mainForm.cal.setTime(mainForm.getCurrentMonthlyPaymentDate());
      mainForm.cal.add(Calendar.MONTH, 1);
      mainForm.setCurrentMonthlyPaymentDate(mainForm.cal.getTime());
    }//GEN-LAST:event_btnCreateMonthlySalariedPaymentsActionPerformed

    private void btnCreateFortnightlyPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFortnightlyPaymentsActionPerformed
      for(Person p : getPersonList()) {
          if(p instanceof SalariedSubordinate) {    //checking if Person object is an instance of SalariedSubordinate
              SalariedSubordinate salariedSubordinate = (SalariedSubordinate) p;    //casting Person object to SalariedSubordinate
              
              if(salariedSubordinate.getTimePeriod().equals(TimePeriod.FORTNIGHTLY)) {  //Checking time period
                  double pay = salariedSubordinate.calculatePay();  //calling calculate pay method
                  
                  //creating Payroll Report Item object and adding it to the ArrayList
                  PayrollReportItem payrollReportItem = new PayrollReportItem(salariedSubordinate, pay,
                  mainForm.getCurrentFortnightlyPaymentDate(), TimePeriod.FORTNIGHTLY);
                  
                  payrollRecordList.add(payrollReportItem);
              }
          }
          else if (p instanceof CEO) {  
              CEO ceo = (CEO) p;
              
              if(ceo.getTimePeriod().equals(TimePeriod.FORTNIGHTLY)) {  //Checking time period
                  double pay = ceo.calculatePay();
                  
                  //creating Payroll Report Item object and adding it to the ArrayList
                  PayrollReportItem payrollReportItem = new PayrollReportItem(ceo, pay,
                  mainForm.getCurrentFortnightlyPaymentDate(), TimePeriod.FORTNIGHTLY);
                  
                  payrollRecordList.add(payrollReportItem);
              }
          }
      }
      
      msgMessage.showMessageDialog(this, "Fortnightly payments have been added for "
              + mainForm.getCurrentFortnightlyPaymentDate(), "Announcement",
              javax.swing.JOptionPane.INFORMATION_MESSAGE);
      
      //incrementing payment date by 14 days
      mainForm.cal.setTime(mainForm.getCurrentFortnightlyPaymentDate());
      mainForm.cal.add(Calendar.DATE, 14);
      mainForm.setCurrentFortnightlyPaymentDate(mainForm.cal.getTime());
    }//GEN-LAST:event_btnCreateFortnightlyPaymentsActionPerformed
   
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
        mainForm.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateFortnightlyPayments;
    private javax.swing.JButton btnCreateMonthlySalariedPayments;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JOptionPane msgMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the personList
     */
    public ArrayList<Person> getPersonList() {
        return personList;
    }

    /**
     * @param personList the personList to set
     */
    public void setPersonList(ArrayList<Person> personList) {
        this.personList = personList;
    }

    /**
     * @return the mainForm
     */
    public MainForm getMainForm() {
        return mainForm;
    }

    /**
     * @param mainForm the mainForm to set
     */
    public void setMainForm(MainForm mainForm) {
        this.mainForm = mainForm;
    }
}
