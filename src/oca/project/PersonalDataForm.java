package oca.project;

import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;

 //Form that allows to display personal details and pay of salaried and contractor employees
 
public class PersonalDataForm extends javax.swing.JFrame {

    private DefaultComboBoxModel model; //Setting up model for populating comboboxes
    private ArrayList<Person> personList;
    private MainForm mainForm;
    private ArrayList<PayrollReportItem> payrollRecordList;   //creating list to hold the report items
    private SimpleDateFormat df;    //setting up date format
    private ContractSubordinate contractSubordinate;
    

    //Creates new personal DataEntryForm
    public PersonalDataForm(ArrayList <PayrollReportItem> payrollRecordList) {
        initComponents();
        panContractor.setVisible(false);
        this.payrollRecordList = payrollRecordList;
        Color lightGreen = new Color(192,249,142);
        panContractor.setBackground(lightGreen);
        panSalariedPerson.setBackground(lightGreen);
    }
    
    //method to populate the name combo box
    public void populateNameComboBox() {
        model = new DefaultComboBoxModel(); 
        for(Person p : getPersonList()) {
            model.addElement(p);
        }
        cboName.setModel(model);
    }
    
    //method that allows to display personal details based on the selection made in the cboName
    public void getPersonalData( ) {
        String message = "";
        df = new SimpleDateFormat("MMM d, yyyy");
        model = new DefaultComboBoxModel();
        
        if(cboName.getSelectedItem() == null) {     //checking if a name has been selected
                message = "Please choose an employee  in the list.";
        }
        else {
            Person person = (Person) cboName.getSelectedItem();     //casting the obect selected to person object
            txtDOB.setText(df.format(person.getDateOfBirth()));
            
            if(person instanceof SalariedSubordinate) { //checking if the person object is an instance of SalariedSubordinate
                
                //casting person object to Salaried Subordinate to access the subclasse's method
                SalariedSubordinate salariedSubordinate = (SalariedSubordinate) person; 
                
                //getting the object's timeperiod and setting it to the combobox
                model.addElement(salariedSubordinate.getTimePeriod()); 
                cboTimePeriod.setModel(model);
                
                //setting employees start date and if contractor or not
                txtStartDate.setText(df.format(salariedSubordinate.getStartDate()));
                lstContractor.setSelectedValue("No", true);
                
                //setting employee's base salary
                txtBaseSalary.setText( "$" + String.valueOf(salariedSubordinate.getBaseSalary()));
            } 
            else if(person instanceof CEO) {
                CEO ceo = (CEO) person; //casting person object to CEO object
                
                //getting the object's timeperiod and setting it to the combobox
                model.addElement(ceo.getTimePeriod());
                cboTimePeriod.setModel(model);
                
                //setting employees start date and if contractor or not
                txtStartDate.setText(df.format(ceo.getStartDate()));
                lstContractor.setSelectedValue("No", true);
                
                //setting ceo's base salary
                txtBaseSalary.setText("$" + String.valueOf(ceo.getBaseSalary()));
            }
            else {
                
                //hiding start date for contractual employees
                txtStartDate.setVisible(false);
                lstContractor.setSelectedValue("Yes", true);
                
                //casting person object to Salaried Subordinate to access the subclasse's method
                contractSubordinate = (ContractSubordinate) person; 
                txtHourlyRate.setText(String.valueOf(contractSubordinate.getHourlyRate()));  
                
                //setting the cboTimePeriod to monthly for contractual employees
                model.addElement(TimePeriod.MONTHLY);
                cboTimePeriod.setModel(model);
            }
            
        }
        if(!message.equals("")) {
            msgMessage.showMessageDialog(this, message, "Announcement", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgMessage = new javax.swing.JOptionPane();
        lblName = new javax.swing.JLabel();
        cboName = new javax.swing.JComboBox();
        lblDOB = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContractor = new javax.swing.JList();
        panContractor = new javax.swing.JPanel();
        lblContractor = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtStartOfPayPeriod = new javax.swing.JTextField();
        txtHoursOfWork = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtHourlyRate = new javax.swing.JTextField();
        btnAddContract = new javax.swing.JButton();
        panSalariedPerson = new javax.swing.JPanel();
        txtBaseSalary = new javax.swing.JTextField();
        lblSalaried = new javax.swing.JLabel();
        lblBaseSalary1 = new javax.swing.JLabel();
        cboTimePeriod = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblName.setText("Name:");

        cboName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cboName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNameItemStateChanged(evt);
            }
        });

        lblDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDOB.setText("Date of Birth:");

        txtDOB.setBackground(new java.awt.Color(234, 234, 239));
        txtDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDOB.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDOB.setEnabled(false);

        lblStartDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStartDate.setText("Start Date:");

        txtStartDate.setBackground(new java.awt.Color(234, 234, 239));
        txtStartDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStartDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtStartDate.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Contractor:");

        lstContractor.setBackground(new java.awt.Color(234, 234, 239));
        lstContractor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lstContractor.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Yes", "No" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstContractor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstContractor.setEnabled(false);
        lstContractor.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstContractorValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstContractor);

        panContractor.setPreferredSize(new java.awt.Dimension(327, 202));

        lblContractor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblContractor.setText("Contractor Worker");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Start date of pay period");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Hours of Work:");

        txtStartOfPayPeriod.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtHoursOfWork.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Hourly rate: ");

        txtHourlyRate.setBackground(new java.awt.Color(234, 234, 239));
        txtHourlyRate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtHourlyRate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtHourlyRate.setEnabled(false);

        btnAddContract.setBackground(new java.awt.Color(204, 204, 255));
        btnAddContract.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddContract.setText("Add");
        btnAddContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddContractActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panContractorLayout = new javax.swing.GroupLayout(panContractor);
        panContractor.setLayout(panContractorLayout);
        panContractorLayout.setHorizontalGroup(
            panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContractorLayout.createSequentialGroup()
                .addComponent(lblContractor)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panContractorLayout.createSequentialGroup()
                .addGroup(panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(panContractorLayout.createSequentialGroup()
                        .addGroup(panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(28, 28, 28)
                        .addGroup(panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStartOfPayPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHoursOfWork, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnAddContract))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panContractorLayout.setVerticalGroup(
            panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panContractorLayout.createSequentialGroup()
                .addComponent(lblContractor)
                .addGap(18, 18, 18)
                .addGroup(panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panContractorLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddContract)
                        .addGap(27, 27, 27))
                    .addGroup(panContractorLayout.createSequentialGroup()
                        .addComponent(txtStartOfPayPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panContractorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHoursOfWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(txtHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(70, Short.MAX_VALUE))))
        );

        txtBaseSalary.setBackground(new java.awt.Color(234, 234, 239));
        txtBaseSalary.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtBaseSalary.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtBaseSalary.setEnabled(false);

        lblSalaried.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSalaried.setText("Salaried Worker");

        lblBaseSalary1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblBaseSalary1.setText("Base Salary: ");

        javax.swing.GroupLayout panSalariedPersonLayout = new javax.swing.GroupLayout(panSalariedPerson);
        panSalariedPerson.setLayout(panSalariedPersonLayout);
        panSalariedPersonLayout.setHorizontalGroup(
            panSalariedPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSalariedPersonLayout.createSequentialGroup()
                .addComponent(lblSalaried)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panSalariedPersonLayout.createSequentialGroup()
                .addComponent(lblBaseSalary1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(txtBaseSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        panSalariedPersonLayout.setVerticalGroup(
            panSalariedPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSalariedPersonLayout.createSequentialGroup()
                .addComponent(lblSalaried)
                .addGap(18, 18, 18)
                .addGroup(panSalariedPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBaseSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBaseSalary1))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        cboTimePeriod.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cboTimePeriod.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Time Period:");

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText(" Personal Information");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panSalariedPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panContractor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboName, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboTimePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel6)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(cboName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOB))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartDate))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboTimePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panContractor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(panSalariedPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //When user selects the name, the personal data is updated
    private void cboNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboNameItemStateChanged
        getPersonalData();  //calling method to access data for each selection change
    }//GEN-LAST:event_cboNameItemStateChanged

    //displays only contractor or salaried worker information based on the selection made in the contractor list
    private void lstContractorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstContractorValueChanged
        if(lstContractor.getSelectedValue().equals("Yes")) {
            txtStartDate.setVisible(false);
            
            //setting pane for contractual employees
            panSalariedPerson.setVisible(false);
            panContractor.setVisible(true);
        } else {
            
            //setting pane for salaried employees
                panSalariedPerson.setVisible(true);
                panContractor.setVisible(false);
        }
    }//GEN-LAST:event_lstContractorValueChanged

    //event handler that allow to assign salary to contractor
    private void btnAddContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddContractActionPerformed
        String message;
        //checking if necessary data are available
        if(txtStartOfPayPeriod.getText().equals("") || txtHoursOfWork.getText().equals("")){
            message = "Please enter start date of pay period and hours of work";
        }
        else {
            try {
                df = new SimpleDateFormat("dd/MM/yyyy"); //setting date format
                
                Date startDateOfPayPeriod = df.parse(txtStartOfPayPeriod.getText());
                double hoursOfWork = Double.parseDouble(txtHoursOfWork.getText());
                
                //checking if previous payment has been made to prevent payment more than once. This is
                //done by checking if date of pay period is not null and if equals to a previously made payment
                if(contractSubordinate.getPeriodStartDate() !=  null && 
                        contractSubordinate.getPeriodStartDate().equals(startDateOfPayPeriod)) {
                    
                    message = "Payment record has already been added for " + startDateOfPayPeriod;
                    
                } else {
                    //calculating pay by invoking method of contract subordinate class
                    double pay = contractSubordinate.calculatePay(startDateOfPayPeriod, hoursOfWork);
                    
                    //creating new payroll report item object for each successful payment
                    PayrollReportItem payrollReportItem = new PayrollReportItem(contractSubordinate, pay,
                    startDateOfPayPeriod, TimePeriod.MONTHLY);
                    payrollRecordList.add(payrollReportItem);   //adding object to the ArrayList
                
                    message = "Contract payment of $" + pay + " was added";
                }
                
            }
        
            catch (ParseException pe) { //catching exception in parsing input dates
                message = "Please input the date in the following format Date/Month/Year"
                            + " e.g. 18/04/1989";
            }
            catch (NumberFormatException nfe) { //catching number conversions exception
                message = "Please enter correct hours of work.";
            }
        }    
        
        msgMessage.showMessageDialog(this, message, "Announcement", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAddContractActionPerformed
    
    //event handler for the Back button that closes the current form and displays the main form 
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        mainForm.setVisible(true);
        this.setVisible(false);
        txtHoursOfWork.setText("");
        txtStartOfPayPeriod.setText("");
        
        //setting pane for salaried employees as a default when returning to this form
        panSalariedPerson.setVisible(true);
        panContractor.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddContract;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox cboName;
    private javax.swing.JComboBox cboTimePeriod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBaseSalary1;
    private javax.swing.JLabel lblContractor;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSalaried;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JList lstContractor;
    private javax.swing.JOptionPane msgMessage;
    private javax.swing.JPanel panContractor;
    private javax.swing.JPanel panSalariedPerson;
    private javax.swing.JTextField txtBaseSalary;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtHourlyRate;
    private javax.swing.JTextField txtHoursOfWork;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtStartOfPayPeriod;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the personList
     */
    public ArrayList<Person> getPersonList() {
        return personList;
    }

    /**
     * @param personList the personList to set
     */
    public void setPersonList(ArrayList<Person> personList) {
        this.personList = personList;
    }

    /**
     * @return the mainForm
     */
    public MainForm getMainForm() {
        return mainForm;
    }

    /**
     * @param mainForm the mainForm to set
     */
    public void setMainForm(MainForm mainForm) {
        this.mainForm = mainForm;
    }

}
